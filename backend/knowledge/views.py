from django.conf import settings  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞
from rest_framework.viewsets import ModelViewSet
from .models import Section, Article
from .serializers import SectionSerializer, ArticleSerializer
from rest_framework.views import APIView
from rest_framework.parsers import MultiPartParser, FormParser
from rest_framework.response import Response
from rest_framework import status
from django.core.files.storage import default_storage
from django.core.files.base import ContentFile
from django.http import JsonResponse
import os


class SectionViewSet(ModelViewSet):
    """
    ViewSet –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–∑–¥–µ–ª–∞–º–∏ (–ø–æ–ª–∫–∞–º–∏).
    """
    queryset = Section.objects.all()
    serializer_class = SectionSerializer

    def get_queryset(self):
        parent_id = self.request.query_params.get('parent')
        if parent_id:
            return Section.objects.filter(parent_id=parent_id)
        return super().get_queryset()
    


class ArticleViewSet(ModelViewSet):
    """
    ViewSet –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—å—è–º–∏ (–∫–Ω–∏–≥–∞–º–∏).
    """
    queryset = Article.objects.all()
    serializer_class = ArticleSerializer

    def get_queryset(self):
        section_id = self.request.query_params.get('section')
        if section_id:
            return Article.objects.filter(section_id=section_id)
        return super().get_queryset()

class FileUploadView(APIView):
    parser_classes = [MultiPartParser, FormParser]

    def post(self, request, *args, **kwargs):
        print("üîπ request.FILES.keys():", request.FILES.keys())  # –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã

        if not request.FILES:
            return Response({"success": False, "message": "–§–∞–π–ª –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω"}, status=400)

        file_key = next(iter(request.FILES.keys()))  # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π –∫–ª—é—á –∏–∑ request.FILES
        file_obj = request.FILES[file_key]  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–ª—é—á
        file_path = default_storage.save(f"{file_obj.name}", file_obj)
        full_url = request.build_absolute_uri(settings.MEDIA_URL + file_obj.name)

        return Response({
            "success": True,
            "data": {"files": [full_url]}
        })
